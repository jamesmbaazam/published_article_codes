#!/usr/bin/python
from math import radians, cos, sin, asin, sqrt
from subprocess import call
from collections import OrderedDict

def haversine(lon1, lat1, lon2, lat2):
    '''
    Calculate the great circle distance between two points 
    on the earth (specified in decimal degrees)
    '''
    # convert decimal degrees to radians 
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    # haversine formula 
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    km = 6371 * c
    return km

def import_locations(filename):
    header = True
    nodes = OrderedDict() # maps location IDs to long-lat coordinates

    for line in file(filename):
        if header:
            header = False
            continue

        p = line.split()
        nodes[p[0]] = [p[2], p[3]]
    return nodes

def write_triangle_input_file(nodes, filename):
    fo = file(filename,'w')

    # from triangle documentation, regarding .node file:
    # First line:  <# of vertices> <dimension (must be 2)> <# of attributes> <# of boundary markers (0 or 1)>
    fo.write(str(len(nodes)) + ' 2 0 0\n')
    for n in nodes.keys():
        coords = nodes[n]
        fo.write(' '.join([n] + coords) + '\n')
        nodes[n] = map(float, coords) # done using them as strings; we need them to be floats after this

    fo.close()

def execute_triangle(input_filename):
    print 'Running triangle ...'
    call(['./triangle/triangle', '-S 0', '-e', '-N', '-E', '-V', '-C', input_filename])
    print 'Triangulation complete.  Processing output ...'

def import_delaunay_edges(filename):
    edges = []
    header = True
    for line in file(filename):
        if line[0] == '#':
            continue
        if header:
            header = False
            continue
        edges.append(tuple(line.split()[1:3])) 
    return edges

def output_edge_coordinates_and_distances(locs, edges, filename):
    fo = file(filename, 'w')
    fo.write('x1 y1 x2 y2 d_km\n')
    edge_lengths = OrderedDict()
    for e in edges:
        L1, L2 = e[0], e[1]
        lon1, lat1, lon2, lat2 = locs[L1][0], locs[L1][1], locs[L2][0], locs[L2][1]
        d = haversine(lon1, lat1, lon2, lat2)
        edge_lengths[e] = d
        fo.write(' '.join( map(str,[lon1, lat1, lon2, lat2, d]) ) + '\n')

    fo.close()
    return edge_lengths

def output_simulator_network_file(edge_lengths, max_mosquito_travel, filename):
    fo = file(filename, 'w')
    fo.write('locationID1 locationID1.1\n') # not crazy about this header line, not sure if it can be changed
    for e in edge_lengths.keys():
        if edge_lengths[e] <= max_mosquito_travel:
            fo.write(e[0] + ' ' + e[1] + '\n')

    fo.close()
    

location_filename    = '../../pop-yucatan/locations-yucatan.txt'
node_filename        = 'yucatan_locations.node'
edge_filename        = node_filename.replace('node', '1.edge') # this the naming convention triangle seems to use
edge_coords_filename = 'delaunay_edge_data.out'
network_filename     = 'network-yucatan.txt' # simulator input file for mosquito movement
max_mosquito_travel  = 1.0 # units is km

node_locations = import_locations(location_filename)
write_triangle_input_file(node_locations, node_filename)
execute_triangle(node_filename)
edges = import_delaunay_edges(edge_filename)
edge_lengths = output_edge_coordinates_and_distances(node_locations, edges, edge_coords_filename)
output_simulator_network_file(edge_lengths, max_mosquito_travel, network_filename)

# Delaunay output; note trailing comment line
'''
tjhladish@llama:~/work/dengue/synthetic_population/mosquito_movement$ head yucatan_locations.1.edge 
1426051  1
   1   38445  40387  0
   2   40387  40209  0
   3   40209  38445  0
   4   288235  40209  0
   5   40209  300506  0
   6   300506  288235  0
   7   39363  40439  0
   8   40439  40367  0
   9   40367  39363  0
tjhladish@llama:~/work/dengue/synthetic_population/mosquito_movement$ tail yucatan_locations.1.edge 
1426043   339753  335445  0
1426044   342721  333837  0
1426045   332955  342721  0
1426046   342721  335892  0
1426047   284664  342721  0
1426048   342721  343198  0
1426049   284664  335892  0
1426050   339312  335892  0
1426051   341157  284359  1
# Generated by ./triangle/triangle -S 0 -e -N -E -V -C yucatan_locations.node
'''
